<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html [
  <!ENTITY % htmlDTD
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "DTD/xhtml1-strict.dtd">
  %htmlDTD;
  <!ENTITY % netErrorDTD
    SYSTEM "chrome://global/locale/netError.dtd">
  %netErrorDTD;

<!ENTITY loadError.label "Problema cargando la página">
<!ENTITY retry.label "Intente nuevamente">
<!ENTITY returnToPreviousPage.label "Atrás">
<!ENTITY advanced.label "Avanzadas">

<!-- Specific error messages -->

<!ENTITY connectionFailure.title "No se puede conectar">
<!ENTITY connectionFailure.longDesc "&sharedLongDesc;">

<!ENTITY deniedPortAccess.title "Esta dirección está restringida">
<!ENTITY deniedPortAccess.longDesc "">

<!ENTITY dnsNotFound.title "Servidor no encontrado">
<!ENTITY dnsNotFound.longDesc "
<ul>
  <li>Verifique si la dirección no tiene errores de tipeo como
    <strong>ww</strong>.ejemplo.com en lugar de
    <strong>www</strong>.ejemplo.com</li>
  <li>Si no puede cargar ninguna página, verifique la conexión a la red de su
    computadora.</li>
  <li>Si su computadora o red está protegida por un firewall o proxy, asegúrese
    que &brandShortName; tenga permiso de acceder a la web.</li>
</ul>
">

<!ENTITY fileNotFound.title "Archivo no encontrado">
<!ENTITY fileNotFound.longDesc "
<ul>
  <li>Verifique el nombre de archivo por errores de mayúsculas o de tipeo.</li>
  <li>Fíjese si el archivo fue movido, renombrado o borrado.</li>
</ul>
">

<!ENTITY fileAccessDenied.title "Acceso denegado al archivo">
<!ENTITY fileAccessDenied.longDesc "
<ul>
  <li>Puede haber sido eliminado, movido o los permisos del archivo pueden evitar el acceso.</li>
</ul>
">

<!ENTITY generic.title "Oops.">
<!ENTITY generic.longDesc "
<p>&brandShortName; no puede cargar esta página por alguna razón.</p>
">

<!ENTITY malformedURI.title "La dirección no es válida">
<!ENTITY malformedURI.longDesc "
<ul>
  <li>Las direcciones web usualmente son escritas como 
    <strong>http://www.ejemplo.com/</strong></li>
  <li>Asegúrese de estar usando las barras correctas (ej.
    <strong>/</strong>).</li>
</ul>
">

<!ENTITY netInterrupt.title "La conexión fue interrumpida">
<!ENTITY netInterrupt.longDesc "&sharedLongDesc;">

<!ENTITY notCached.title "Documento expirado">
<!ENTITY notCached.longDesc "<p>El documento solicitado no está disponible en caché de &brandShortName;.</p><ul><li>Como una precaución de seguridad, &brandShortName; no reenvía automáticamente documentos sensibles.</li><li>Haga clic en Intente nuevamente para solicitar el documento al sitio web nuevamente.</li></ul>">

<!ENTITY netOffline.title "Modo sin conexión a la red">
<!ENTITY netOffline.longDesc2 "
<ul>
  <li>Presione &quot;Intente nuevamente&quot; para volver al modo con conexión y recargar la página.</li>
</ul>
">

<!ENTITY contentEncodingError.title "Error de codificación de contenido">
<!ENTITY contentEncodingError.longDesc "
<ul>
  <li>Contacte a los duenos del sitio web para informarles sobre este problema.</li>
</ul>
">

<!ENTITY unsafeContentType.title "Tipo de archivo inseguro">
<!ENTITY unsafeContentType.longDesc "
<ul>
  <li>Contacte a los dueños del sitio web para informarles de este problema.</li>
</ul>
">

<!ENTITY netReset.title "La conexión fue restablecida">
<!ENTITY netReset.longDesc "&sharedLongDesc;">

<!ENTITY netTimeout.title "La conexión tardó demasiado tiempo">
<!ENTITY netTimeout.longDesc "&sharedLongDesc;">

<!ENTITY unknownProtocolFound.title "La dirección no fue comprendida">
<!ENTITY unknownProtocolFound.longDesc "
<ul>
  <li>Necesita instalar otro software para abrir esta dirección.</li>
</ul>
">

<!ENTITY proxyConnectFailure.title "El servidor proxy está rechazando las conexiones">
<!ENTITY proxyConnectFailure.longDesc "
<ul>
  <li>Verifique las opciones de proxy para confirmar que están correctas.</li>
  <li>Contacte a su administrador de red para asegurarse que el servidor proxy está
    funcionando.</li>
</ul>
">

<!ENTITY proxyResolveFailure.title "No se puede encontrar el servidor proxy">
<!ENTITY proxyResolveFailure.longDesc "
<ul>
  <li>Verifique las opciones de proxy para confirmar que están correctas.</li>
  <li>Asegúrese que su computadora tenga una conexión de red en funcionamiento.</li>
  <li>Si su computadora o red están protegidas por un firewall o proxy, asegúrese
    que &brandShortName; tenga permiso de acceder a la web.</li>
</ul>
">

<!ENTITY redirectLoop.title "La página no está siendo redireccionada correctamente">
<!ENTITY redirectLoop.longDesc "
<ul>
  <li>Este problema a veces es causado por deshabilitar o rechazar 
    cookies.</li>
</ul>
">

<!ENTITY unknownSocketType.title "Respuesta inesperada del servidor">
<!ENTITY unknownSocketType.longDesc "
<ul>
  <li>Verifique que su sistema tenga instalado el Personal Security Manager.</li>
  <li>Ésto puede deberse a una configuración no estándar del servidor.</li>
</ul>
">

<!ENTITY nssFailure2.title "Fallo en conexión segura">
<!ENTITY nssFailure2.longDesc2 "
<ul>
  <li>La página que está tratando de ver no puede mostrarse porque la autenticidad de los datos recibidos no puede verificarse.</li>
  <li>Contacte a los dueños del sitio para informarles de este problema.</li>
</ul>
">

<!ENTITY certerror.longpagetitle1 "La conexión no es segura">
<!-- Localization note (certerror.introPara) - The text content of the span tag
will be replaced at runtime with the name of the server to which the user
was trying to connect. -->
<!ENTITY certerror.introPara "El dueño de <span class='hostname'/> ha configurado mal el sitio we.  Para proteger la información contra robos, &brandShortName; no ha conectado a este sitio web.">

<!ENTITY sharedLongDesc "
<ul>
  <li>El sitio puede no estar disponible temporariamente o estar sobrecargado. Intente nuevamente en unos
    momentos.</li>
  <li>Si no puede cargar ninguna página, verifique la conexión de su computadora
    a la red.</li>
  <li>Si su computadora o red están protegidas por un firewall o proxy, asegúrese
    que &brandShortName; tiene permiso para acceder a la web.</li>
</ul>
">

<!ENTITY cspBlocked.title "Bloqueado por política de seguridad de contenido">
<!ENTITY cspBlocked.longDesc "<p>&brandShortName; evitó que esta página se cargue de esta forma porque tiene una política de seguridad que la deshabilita.</p>">

<!ENTITY corruptedContentErrorv2.title "Error de contenido corrupto">
<!ENTITY corruptedContentErrorv2.longDesc "<p>La página que está tratando de ver no puede mostrarse porque se detectó un error en la transmisión de los datos.</p><ul><li>Contacte a los dueños del sitio web para informarles de este problema.</li></ul>">


<!ENTITY securityOverride.exceptionButtonLabel "Agregar excepción">

<!ENTITY errorReporting.automatic2 "Informar errores como este para ayudar a Mozilla a identificarlo y bloquear sitios maliciosos">
<!ENTITY errorReporting.learnMore "Conocer más…">

<!ENTITY remoteXUL.title "XUL remoto">
<!ENTITY remoteXUL.longDesc "<p><ul><li>Contacte a los dueños de sitio web para informarles de este problema.</li></ul></p>">

<!ENTITY sslv3Used.title "No se puede conectar de forma segura">
<!-- LOCALIZATION NOTE (sslv3Used.longDesc2) - Do not translate
     "SSL_ERROR_UNSUPPORTED_VERSION". -->
<!ENTITY sslv3Used.longDesc2 "Información avanzada: SSL_ERROR_UNSUPPORTED_VERSION">

<!ENTITY weakCryptoUsed.title "La conexión no es segura">
<!-- LOCALIZATION NOTE (weakCryptoUsed.longDesc2) - Do not translate
     "SSL_ERROR_NO_CYPHER_OVERLAP". -->
<!ENTITY weakCryptoUsed.longDesc2 "Información avanzada: SSL_ERROR_NO_CYPHER_OVERLAP">
<!ENTITY weakCryptoAdvanced.title "Avanzado">
<!ENTITY weakCryptoAdvanced.longDesc "<span class='hostname'></span> usa tecnología de seguridad que es obsoleta y vulnerable para los ataques. Un atacante podría revelar fácilmente información que se pensaría que es segura.">
<!ENTITY weakCryptoAdvanced.override "(No es seguro) Intente cargar <span class='hostname'></span> usando seguridad obsoleta">

<!-- LOCALIZATION NOTE (certerror.wrongSystemTime) - The <span id='..' /> tags will be injected with actual values,
     please leave them unchanged. -->
<!ENTITY certerror.wrongSystemTime "<p>No es posible una conexión segura a <span id='wrongSystemTime_URL'/> porque el reloj parece estar mostrando la hora incorrecta.</p><p>La computadora piensa que es <span id='wrongSystemTime_systemDate'/> cuando debería ser <span id='wrongSystemTime_actualDate'/>. Para solucionar el problema, cambie la fecha y hora para que coincidan con las correctas.</p>">

<!ENTITY certerror.pagetitle1  "Conexión insegura">
<!ENTITY certerror.whatShouldIDo.badStsCertExplanation "Este sitio usa HTTP
Strict Transport Security (HSTS) para especificar que &brandShortName; solamente se conecte
de forma segura. Como resultado, no es posible agregar una excepción para este
certificado.">
<!ENTITY certerror.copyToClipboard.label "Copiar texto al portapapeles">

<!ENTITY inadequateSecurityError.title "La conexión no es segura">
<!-- LOCALIZATION NOTE (inadequateSecurityError.longDesc) - Do not translate
     "NS_ERROR_NET_INADEQUATE_SECURITY". -->
<!ENTITY inadequateSecurityError.longDesc "<p><span class='hostname'></span> usa tecnología de seguridad que es obsoleta y vulnerable a los ataques. Un atacante podría fácilmente revelar información que se piensa segura. El administrador del sitio web necesitará corregir el servidor antes de poder visitar el sitio.</p><p>Código de error: NS_ERROR_NET_INADEQUATE_SECURITY</p>">

<!ENTITY prefReset.longDesc "Parece que la configuración de seguridad de la red puede estar causando esto. ¿Desea que se restaure la configuración predeterminada?">
<!ENTITY prefReset.label "Restaurar configuración predeterminada">

  <!ENTITY % globalDTD
    SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
]>
<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    <title>Problema cargando la página</title>
    <link rel="stylesheet" href="a_data_003/aboutNetError.css" type="text/css" media="all" />
    <!-- If the location of the favicon is changed here, the FAVICON_ERRORPAGE_URL symbol in
         toolkit/components/places/src/nsFaviconService.h should be updated. -->
    <link rel="icon" type="image/png" id="favicon" href="chrome://global/skin/icons/warning-16.png" />

    <script type="application/javascript"><![CDATA[
      // Error url MUST be formatted like this:
      //   moz-neterror:page?e=error&u=url&d=desc
      //
      // or optionally, to specify an alternate CSS class to allow for
      // custom styling and favicon:
      //
      //   moz-neterror:page?e=error&u=url&s=classname&d=desc

      // Note that this file uses document.documentURI to get
      // the URL (with the format from above). This is because
      // document.location.href gets the current URI off the docshell,
      // which is the URL displayed in the location bar, i.e.
      // the URI that the user attempted to load.

      function getErrorCode()
      {
        var url = document.documentURI;
        var error = url.search(/e\=/);
        var duffUrl = url.search(/\&u\=/);
        return decodeURIComponent(url.slice(error + 2, duffUrl));
      }

      // Set to true on init if the error code is nssBadCert.
      var gIsCertError;

      function getCSSClass()
      {
        var url = document.documentURI;
        var matches = url.match(/s\=([^&]+)\&/);
        // s is optional, if no match just return nothing
        if (!matches || matches.length < 2)
          return "";

        // parenthetical match is the second entry
        return decodeURIComponent(matches[1]);
      }

      function getDescription()
      {
        var url = document.documentURI;
        var desc = url.search(/d\=/);

        // desc == -1 if not found; if so, return an empty string
        // instead of what would turn out to be portions of the URI
        if (desc == -1)
          return "";

        return decodeURIComponent(url.slice(desc + 2));
      }

      function retryThis(buttonEl)
      {
        // Note: The application may wish to handle switching off "offline mode"
        // before this event handler runs, but using a capturing event handler.

        // Session history has the URL of the page that failed
        // to load, not the one of the error page. So, just call
        // reload(), which will also repost POST data correctly.
        try {
          location.reload();
        } catch (e) {
          // We probably tried to reload a URI that caused an exception to
          // occur;  e.g. a nonexistent file.
        }

        buttonEl.disabled = true;
      }

      function doOverride(buttonEl) {
        var event = new CustomEvent("AboutNetErrorOverride", {bubbles:true});
        document.dispatchEvent(event);
        retryThis(buttonEl);
      }

      function toggleDisplay(node) {
        toggle = {
          "": "block",
          "none": "block",
          "block": "none"
        };
        return (node.style.display = toggle[node.style.display]);
      }

      function showCertificateErrorReporting() {
        // Display error reporting UI
        document.getElementById("certificateErrorReporting").style.display = "block";
      }

      function showPrefChangeContainer() {
        const panel = document.getElementById("prefChangeContainer");
        panel.style.display = "block";
        document.getElementById("netErrorButtonContainer").style.display = "none";
        document.getElementById("prefResetButton").addEventListener("click", function resetPreferences(e) {
          const event = new CustomEvent("AboutNetErrorResetPreferences", {bubbles:true});
          document.dispatchEvent(event);
        });
      }

      function showAdvancedButton(allowOverride) {
        // Get the hostname and add it to the panel
        var panelId = gIsCertError ? "badCertAdvancedPanel" : "weakCryptoAdvancedPanel";
        var panel = document.getElementById(panelId);
        for (var span of panel.querySelectorAll("span.hostname")) {
          span.textContent = document.location.hostname;
        }
        if (!gIsCertError) {
          panel.replaceChild(document.getElementById("errorLongDesc"),
                             document.getElementById("advancedLongDesc"));
        }

        // Register click handler for the weakCryptoAdvancedPanel
        document.getElementById("advancedButton")
                .addEventListener("click", function togglePanelVisibility() {
          toggleDisplay(panel);
          if (gIsCertError) {
            // Toggling the advanced panel must ensure that the debugging
            // information panel is hidden as well, since it's opened by the
            // error code link in the advanced panel.
            var div = document.getElementById("certificateErrorDebugInformation");
            div.style.display = "none";
          }

          if (panel.style.display == "block") {
            // send event to trigger telemetry ping
            var event = new CustomEvent("AboutNetErrorUIExpanded", {bubbles:true});
            document.dispatchEvent(event);
          }
        });

        if (allowOverride) {
          document.getElementById("overrideWeakCryptoPanel").style.display = "flex";
          var overrideLink = document.getElementById("overrideWeakCrypto");
          overrideLink.addEventListener("click", () => doOverride(overrideLink), false);
        }
      }

      function initPageCertError() {
        document.body.className = "certerror";
        document.title = document.getElementById("certErrorPageTitle").textContent;
        for (let host of document.querySelectorAll(".hostname")) {
          host.textContent = document.location.hostname;
        }

        showAdvancedButton(true);

        var cssClass = getCSSClass();
        if (cssClass == "expertBadCert") {
          toggleDisplay(document.getElementById("badCertAdvancedPanel"));
          // Toggling the advanced panel must ensure that the debugging
          // information panel is hidden as well, since it's opened by the
          // error code link in the advanced panel.
          var div = document.getElementById("certificateErrorDebugInformation");
          div.style.display = "none";
        }

        document.getElementById("learnMoreContainer").style.display = "block";

        var checkbox = document.getElementById("automaticallyReportInFuture");
        checkbox.addEventListener("change", function ({target: {checked}}) {
          document.dispatchEvent(new CustomEvent("AboutNetErrorSetAutomatic", {
            detail: checked,
            bubbles: true
          }));
        });

        addEventListener("AboutNetErrorOptions", function (event) {
          var options = JSON.parse(event.detail);
          if (options && options.enabled) {
            // Display error reporting UI
            document.getElementById("certificateErrorReporting").style.display = "block";

            // set the checkbox
            checkbox.checked = !!options.automatic;
          }
        }, true, true);

        // Disallow overrides if this is a Strict-Transport-Security
        // host and the cert is bad (STS Spec section 7.3) or if the
        // certerror is in a frame (bug 633691).
        if (cssClass == "badStsCert" || window != top) {
          document.getElementById("exceptionDialogButton").setAttribute("hidden", "true");
        }
        if (cssClass == "badStsCert") {
          document.getElementById("badStsCertExplanation").removeAttribute("hidden");
        }

        document.getElementById("badCertTechnicalInfo").textContent = getDescription();

        var event = new CustomEvent("AboutNetErrorLoad", {bubbles:true});
        document.getElementById("advancedButton").dispatchEvent(event);

        addDomainErrorLinks();
      }

      function initPage()
      {
        var err = getErrorCode();
        gIsCertError = (err == "nssBadCert");

        // if it's an unknown error or there's no title or description
        // defined, get the generic message
        var errTitle = document.getElementById("et_" + err);
        var errDesc  = document.getElementById("ed_" + err);
        if (!errTitle || !errDesc)
        {
          errTitle = document.getElementById("et_generic");
          errDesc  = document.getElementById("ed_generic");
        }

        document.querySelector(".title-text").innerHTML = errTitle.innerHTML;

        var sd = document.getElementById("errorShortDescText");
        if (sd) {
          if (gIsCertError) {
            sd.innerHTML = document.getElementById("ed_nssBadCert").innerHTML;
          }
          else {
            sd.textContent = getDescription();
          }
        }
        if (gIsCertError) {
          initPageCertError();
          return;
        }

        var ld = document.getElementById("errorLongDesc");
        if (ld)
        {
          ld.innerHTML = errDesc.innerHTML;
        }

        if (err == "sslv3Used") {
          document.getElementById("learnMoreContainer").style.display = "block";
          var learnMoreLink = document.getElementById("learnMoreLink");
          learnMoreLink.href = "https://support.mozilla.org/kb/how-resolve-sslv3-error-messages-firefox";
          document.body.className = "certerror";
        }

        if (err == "weakCryptoUsed") {
          document.body.className = "certerror";
        }

        // remove undisplayed errors to avoid bug 39098
        var errContainer = document.getElementById("errorContainer");
        errContainer.parentNode.removeChild(errContainer);

        var className = getCSSClass();
        if (className && className != "expertBadCert") {
          // Associate a CSS class with the root of the page, if one was passed in,
          // to allow custom styling.
          // Not "expertBadCert" though, don't want to deal with the favicon
          document.documentElement.className = className;

          // Also, if they specified a CSS class, they must supply their own
          // favicon.  In order to trigger the browser to repaint though, we
          // need to remove/add the link element.
          var favicon = document.getElementById("favicon");
          var faviconParent = favicon.parentNode;
          faviconParent.removeChild(favicon);
          favicon.setAttribute("href", "chrome://global/skin/icons/" + className + "_favicon.png");
          faviconParent.appendChild(favicon);
        }

        if (err == "remoteXUL") {
          // Remove the "Try again" button for remote XUL errors given that
          // it is useless.
          document.getElementById("netErrorButtonContainer").style.display = "none";
        }

        if (err == "cspBlocked") {
          // Remove the "Try again" button for CSP violations, since it's
          // almost certainly useless. (Bug 553180)
          document.getElementById("netErrorButtonContainer").style.display = "none";
        }

        window.addEventListener("AboutNetErrorOptions", function(evt) {
        // Pinning errors are of type nssFailure2
          if (getErrorCode() == "nssFailure2" || getErrorCode() == "weakCryptoUsed") {
            document.getElementById("learnMoreContainer").style.display = "block";
            var learnMoreLink = document.getElementById("learnMoreLink");
            // nssFailure2 also gets us other non-overrideable errors. Choose
            // a "learn more" link based on description:
            if (getDescription().includes("mozilla_pkix_error_key_pinning_failure")) {
              learnMoreLink.href = "https://support.mozilla.org/kb/certificate-pinning-reports";
            }
            if (getErrorCode() == "weakCryptoUsed") {
              learnMoreLink.href = "https://support.mozilla.org/kb/how-resolve-weak-crypto-error-messages-firefox";
            }

            var options = JSON.parse(evt.detail);
            if (options && options.enabled) {
              var checkbox = document.getElementById("automaticallyReportInFuture");
              showCertificateErrorReporting();
              if (options.automatic) {
                // set the checkbox
                checkbox.checked = true;
              }

              checkbox.addEventListener("change", function(evt) {
                  var event = new CustomEvent("AboutNetErrorSetAutomatic",
                    {bubbles:true, detail:evt.target.checked});
                  document.dispatchEvent(event);
                }, false);
            }
            const hasPrefStyleError = [
              "interrupted", // This happens with subresources that are above the max tls
              "SSL_ERROR_PROTOCOL_VERSION_ALERT",
              "SSL_ERROR_UNSUPPORTED_VERSION",
              "SSL_ERROR_NO_CYPHER_OVERLAP",
              "SSL_ERROR_NO_CIPHERS_SUPPORTED"
            ].some((substring) => getDescription().includes(substring));
            // If it looks like an error that is user config based
            if (getErrorCode() == "nssFailure2" && hasPrefStyleError && options && options.changedCertPrefs) {
              showPrefChangeContainer();
            }
          }
          if (getErrorCode() == "weakCryptoUsed" || getErrorCode() == "sslv3Used") {
            showAdvancedButton(getErrorCode() == "weakCryptoUsed");
          }
        }.bind(this), true, true);

        var event = new CustomEvent("AboutNetErrorLoad", {bubbles:true});
        document.dispatchEvent(event);

        if (err == "inadequateSecurityError") {
          // Remove the "Try again" button for HTTP/2 inadequate security as it
          // is useless.
          document.getElementById("errorTryAgain").style.display = "none";

          var container = document.getElementById("errorLongDesc");
          for (var span of container.querySelectorAll("span.hostname")) {
            span.textContent = document.location.hostname;
          }
        }

        addDomainErrorLinks();
      }

      /* Try to preserve the links contained in the error description, like
         the error code.

         Also, in the case of SSL error pages about domain mismatch, see if
         we can hyperlink the user to the correct site.  We don't want
         to do this generically since it allows MitM attacks to redirect
         users to a site under attacker control, but in certain cases
         it is safe (and helpful!) to do so.  Bug 402210
      */
      function addDomainErrorLinks() {
        // Rather than textContent, we need to treat description as HTML
        var sdid = gIsCertError ? "badCertTechnicalInfo" : "errorShortDescText";
        var sd = document.getElementById(sdid);
        if (sd) {
          var desc = getDescription();

          // sanitize description text - see bug 441169

          // First, find the index of the <a> tags we care about, being
          // careful not to use an over-greedy regex.
          var codeRe = /<a id="errorCode" title="([^"]+)">/;
          var codeResult = codeRe.exec(desc);
          var domainRe = /<a id="cert_domain_link" title="([^"]+)">/;
          var domainResult = domainRe.exec(desc);

          // The order of these links in the description is fixed in
          // TransportSecurityInfo.cpp:formatOverridableCertErrorMessage.
          var firstResult = domainResult;
          if(!domainResult)
            firstResult = codeResult;
          if (!firstResult)
            return;
          // Remove sd's existing children
          sd.textContent = "";

          // Everything up to the first link should be text content.
          sd.appendChild(document.createTextNode(desc.slice(0, firstResult.index)));

          // Now create the actual links.
          if (domainResult) {
            createLink(sd, "cert_domain_link", domainResult[1])
            // Append text for anything between the two links.
            sd.appendChild(document.createTextNode(desc.slice(desc.indexOf("</a>") + "</a>".length, codeResult.index)));
          }
          createLink(sd, "errorCode", codeResult[1])

          // Finally, append text for anything after the last closing </a>.
          sd.appendChild(document.createTextNode(desc.slice(desc.lastIndexOf("</a>") + "</a>".length)));
        }

        if (gIsCertError) {
          // Initialize the error code link embedded in the error message to
          // display debug information about the cert error.
          var errorCode = document.getElementById("errorCode");
          if (errorCode) {
            errorCode.href = "#technicalInformation";
            errorCode.addEventListener("click", () => {
              var div = document.getElementById("certificateErrorDebugInformation");
              if (toggleDisplay(div) == "block") {
                div.scrollIntoView({block: "start", behavior: "smooth"});
              }
            }, false);
          }
        }

        // Initialize the cert domain link.
        var link = document.getElementById("cert_domain_link");
        if (!link)
          return;

        var okHost = link.getAttribute("title");
        var thisHost = document.location.hostname;
        var proto = document.location.protocol;

        // If okHost is a wildcard domain ("*.example.com") let's
        // use "www" instead.  "*.example.com" isn't going to
        // get anyone anywhere useful. bug 432491
        okHost = okHost.replace(/^\*\./, "www.");

        /* case #1:
         * example.com uses an invalid security certificate.
         *
         * The certificate is only valid for www.example.com
         *
         * Make sure to include the "." ahead of thisHost so that
         * a MitM attack on paypal.com doesn't hyperlink to "notpaypal.com"
         *
         * We'd normally just use a RegExp here except that we lack a
         * library function to escape them properly (bug 248062), and
         * domain names are famous for having '.' characters in them,
         * which would allow spurious and possibly hostile matches.
         */
        if (okHost.endsWith("." + thisHost))
          link.href = proto + okHost;

        /* case #2:
         * browser.garage.maemo.org uses an invalid security certificate.
         *
         * The certificate is only valid for garage.maemo.org
         */
        if (thisHost.endsWith("." + okHost))
          link.href = proto + okHost;

        // If we set a link, meaning there's something helpful for
        // the user here, expand the section by default
        if (link.href && getCSSClass() != "expertBadCert") {
          var panelId = gIsCertError ? "badCertAdvancedPanel" : "weakCryptoAdvancedPanel"
          toggleDisplay(document.getElementById(panelId));
          if (gIsCertError) {
            // Toggling the advanced panel must ensure that the debugging
            // information panel is hidden as well, since it's opened by the
            // error code link in the advanced panel.
            var div = document.getElementById("certificateErrorDebugInformation");
            div.style.display = "none";
          }
        }
      }

      function createLink(el, id, text) {
        var anchorEl = document.createElement("a");
        anchorEl.setAttribute("id", id);
        anchorEl.setAttribute("title", text);
        anchorEl.appendChild(document.createTextNode(text));
        el.appendChild(anchorEl);
      }
    ]]></script>
  </head>

  <body dir="ltr">
    <!-- Contains an alternate page title set on page init for cert errors. -->
    <div id="certErrorPageTitle" style="display: none;">Conexión insegura</div>

    <!-- ERROR ITEM CONTAINER (removed during loading to avoid bug 39098) -->
    

    <!-- PAGE CONTAINER (for styling purposes only) -->
    <div id="errorPageContainer" class="container">

      <!-- Error Title -->
      <div class="title">
        <h1 class="title-text">Servidor no encontrado</h1>
      </div>

      <!-- LONG CONTENT (the section most likely to require scrolling) -->
      <div id="errorLongContent">

        <!-- Short Description -->
        <div id="errorShortDesc">
          <p id="errorShortDescText">Firefox no puede encontrar el servidor en translate.google.com.ar.</p>
        </div>
        <p id="badStsCertExplanation" hidden="true">Este sitio usa HTTP
Strict Transport Security (HSTS) para especificar que Firefox solamente se conecte
de forma segura. Como resultado, no es posible agregar una excepción para este
certificado.</p>

        <div id="wrongSystemTimePanel" style="display: none;">
          <p>No es posible una conexión segura a <span id="wrongSystemTime_URL"></span> porque el reloj parece estar mostrando la hora incorrecta.</p><p>La computadora piensa que es <span id="wrongSystemTime_systemDate"></span> cuando debería ser <span id="wrongSystemTime_actualDate"></span>. Para solucionar el problema, cambie la fecha y hora para que coincidan con las correctas.</p>
        </div>

        <!-- Long Description (Note: See netError.dtd for used XHTML tags) -->
        <div id="errorLongDesc">
<ul xmlns="http://www.w3.org/1999/xhtml">
  <li>Verifique si la dirección no tiene errores de tipeo como
    <strong>ww</strong>.ejemplo.com en lugar de
    <strong>www</strong>.ejemplo.com</li>
  <li>Si no puede cargar ninguna página, verifique la conexión a la red de su
    computadora.</li>
  <li>Si su computadora o red está protegida por un firewall o proxy, asegúrese
    que Firefox tenga permiso de acceder a la web.</li>
</ul>
</div>

        <div id="learnMoreContainer">
          <p><a href="https://support.mozilla.org/kb/what-does-your-connection-is-not-secure-mean" id="learnMoreLink" target="new">Conocer más…</a></p>
        </div>

        <div id="prefChangeContainer" class="button-container">
          <p>Parece que la configuración de seguridad de la red puede 
estar causando esto. ¿Desea que se restaure la configuración 
predeterminada?</p>
          <button id="prefResetButton" class="primary" autocomplete="off">Restaurar configuración predeterminada</button>
        </div>

        <div id="certErrorButtonContainer" class="button-container">
          <button id="returnButton" class="primary" autocomplete="off" autofocus="true">Atrás</button>
          <div class="button-spacer"></div>
          <button id="advancedButton" autocomplete="off" autofocus="true">Avanzadas</button>
        </div>
      </div>

      <div id="netErrorButtonContainer" class="button-container">
        <button id="errorTryAgain" class="primary" autocomplete="off" onclick="retryThis(this);">Intente nuevamente</button>
      </div>

      <script>
        // Only do autofocus if we're the toplevel frame; otherwise we
        // don't want to call attention to ourselves!  The key part is
        // that autofocus happens on insertion into the tree, so we
        // can remove the button, add @autofocus, and reinsert the
        // button.
        if (window.top == window) {
            var button = document.getElementById("errorTryAgain");
            var parent = button.parentNode;
            button.remove();
            button.setAttribute("autofocus", "true");
            parent.appendChild(button);
        }
      </script>

      <!-- UI for option to report certificate errors to Mozilla. Removed on
           init for other error types .-->
      <div id="certificateErrorReporting">
        <p>
          <input id="automaticallyReportInFuture" type="checkbox" />
          <label for="automaticallyReportInFuture" id="automaticallyReportInFuture">Informar errores como este para ayudar a Mozilla a identificarlo y bloquear sitios maliciosos</label>
        </p>
      </div>

      <div id="advancedPanelContainer">
        <div id="weakCryptoAdvancedPanel" class="advanced-panel">
          <div id="weakCryptoAdvancedDescription">
            <p><span class="hostname"></span> usa tecnología de 
seguridad que es obsoleta y vulnerable para los ataques. Un atacante 
podría revelar fácilmente información que se pensaría que es segura.</p>
          </div>
          <div id="advancedLongDesc"></div>
          <div id="overrideWeakCryptoPanel">
            <a id="overrideWeakCrypto" href="#">(No es seguro) Intente cargar <span class="hostname"></span> usando seguridad obsoleta</a>
          </div>
        </div>

        <div id="badCertAdvancedPanel" class="advanced-panel">
          <p id="badCertTechnicalInfo"></p>
          <button id="exceptionDialogButton">Agregar excepción</button>
        </div>
      </div>

    </div>

    <div id="certificateErrorDebugInformation">
      <a name="technicalInformation"></a>
      <button id="copyToClipboard">Copiar texto al portapapeles</button>
      <div id="certificateErrorText"></div>
      <button id="copyToClipboard">Copiar texto al portapapeles</button>
    </div>

    <!--
    - Note: It is important to run the script this way, instead of using
    - an onload handler. This is because error pages are loaded as
    - LOAD_BACKGROUND, which means that onload handlers will not be executed.
    -->
    <script type="application/javascript">initPage();</script>

  </body>
</html>